\documentclass{article}

\usepackage[utf8]{inputenc}
\usepackage{color}
\usepackage[left=1in,right=1in,top=1in,bottom=1in]{geometry}
\usepackage{amsmath, amssymb, amsthm}
\usepackage{textcomp}

\usepackage{enumerate}

\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}
\fancyhead[R]{Caner Derici}
\fancyfoot[C]{\thepage}

% \usepackage{lipsum}

\newcommand{\HRule}{\rule{\linewidth}{0.5mm}}
\newcommand{\Hrule}{\rule{\linewidth}{0.3mm}}

\makeatletter% since there's an at-sign (@) in the command name
\renewcommand{\@maketitle}{
  \parindent=0pt% don't indent paragraphs in the title block
  
  {\Large \bf \@title}
  
  \Hrule%
    
  \textit{\@author \hfill \@date}
  \par
}
\makeatother% resets the meaning of the at-sign (@)

\title{Y790-32707 - Assignment 1: Brief Research Interest Statements}
\author{}
\date{Caner Derici}

\begin{document}
%\pagenumbering{gobble}

\maketitle% prints the title block

\section{General Audiance}

Software contracts are a powerful approach for documenting and
checking specifications in programs, and have been widely adopted by
software developers. However, they typically come with drawbacks: slow
performance, possible runtime errors, and confusing semantics. In this
talk, I'll describe three lines of work, which addresses each of these
problems. I will describe a framework for understanding different
kinds of contracts, and making them work together. I will also present
an approach for statically verifying contracts, allowing programmers
to know that they won't fail at runtime. And I will describe how to
use just-in-time compilation to accelerate the runtime checking of
contracts by orders of magnitude.

\paragraph{}

The use of technology has reached to the point where the natural
selection of software kicks in. As we use the technology in more and
more aspects of our daily lives, we leave the unreliable software
behind and choose to use only the well developed and reliable
software. This phenomenon results in the need for implementing
advanced techniques to ensure the reliability of the software being
developed. One of such techniques to improve the dependability of the
software is documenting and checking specifications in programs. This
allows various kinds of analyses to verify the programs in both
development and runtime of the software.

\paragraph{}

The software that is developed in human readable code in a certain
programming language needs to be compiled into machine executable code
to be run by a computer. Considering the number of programming
languages and the studies in the last five decades, there are  compilation techniques

There are countless number of such compilers,
as well as compilation techniques.



\newpage

\section{Expert Audiance}

\paragraph{} asdaskdjahsda

\paragraph{} asdaskdjahsda 

%% \begin{thebibliography}{1}

%% \bibitem{www}
%% E. Başar, C. Derici, Ç. Şenol, \emph{WorldWithWeb: A compiler from world applications to JavaScript}, In proceedings of The Scheme and Functional Programming Workshop\hskip 1em plus 0.5em minus 0.4em\relax Boston, Massachusetts, 2009.

%% \end{thebibliography}


\end{document}
